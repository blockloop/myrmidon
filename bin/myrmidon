#!/usr/bin/env node

var lib = require('../lib/myrmidon.js');
var fs = require('fs');
var path = require('path');
var _ = require('lodash');
var util = require('../lib/utils');
var prompt = require('read');
var program = require('commander');
var colors = require('colors');
var now = require('moment');


function date(v) {
	return now(v).toDate();
}

program
	.version(require('../package.json').version)
	.option('-c, --config', 'Specify a config file to use');


program
	.command('add-playlist <id>')
	.action(function(id, opts) {
		lib.playlistId(id);
	});

program
	.command('add-by-user <user>')
	.action(function (user) {
		lib.getFeedsForUser(user, function(items){
			console.log('Found '+ items.length +' playlists for '+ user);
			console.log('');

			_.forEach(items, function(item, i){
				console.log("\t"+ i + ": " + item.title);
			});
			console.log('');

			prompt({prompt: 'Choose a playlist: '}, function(err, result){
				var choice = items[result];
				lib.addFeed(choice);
			});
		});
	});

program
	.command('import-feed <userId>')
	.action(function (user) {
		lib.importFeed(user);
	});


program
	.command('download <user>')
	.option('-l, --limit <date>', 'Only download videos after this date/time', date)
	.option('-t, --today', 'Only download videos published today')
	.action(function (user, opts) {
		var limit = opts.today ? now() : opts.limit;
		lib.downloadNewSubscriptions(user, opts);
	});


program
	.command('*')
	.action(program.help);


program
	.parse(process.argv);